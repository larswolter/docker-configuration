version: "2"
services:
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs
    labels: 
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: ""
    networks:
      - nginx_proxy
      - nginx_prosody
      - nginx_portainer
      - nginx_ultisite
      - nginx_toolws
      - nginx_nextcloud
      - nginx_icinga

  nginx-gen:
    build:
      context: "."
      dockerfile: nginx-gen.dockerfile
    container_name: nginx-gen
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro 
    volumes_from: 
      - nginx 
    labels: 
      com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen: ""
    depends_on:
      - nginx
    command: -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    networks:
      - nginx_proxy
      - nginx_prosody
      - nginx_portainer
      - nginx_ultisite
      - nginx_toolws
      - nginx_nextcloud
      - nginx_icinga

  nginx-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:latest
    container_name: nginx-letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  
    volumes_from: 
      - nginx 
    depends_on:
      - nginx-gen
    environment:
      ACME_CA_URI: https://acme-staging.api.letsencrypt.org/directory
      NGINX_DOCKER_GEN_CONTAINER: nginx-gen
    networks:
      - nginx_proxy

  portainer:
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    environment:
      VIRTUAL_HOST: "admin.${DOMAINNAME}"
      LETSENCRYPT_HOST: "admin.${DOMAINNAME}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    depends_on:
      - nginx-gen
      - nginx-letsencrypt
    networks:
      - nginx_portainer

  icinga:
    image: jordan/icinga2
    container_name: icinga
    hostname: "icinga.${DOMAINNAME}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      VIRTUAL_HOST: "icinga.${DOMAINNAME}"
      LETSENCRYPT_HOST: "icinga.${DOMAINNAME}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
      DEFAULT_MYSQL_HOST: "mariadb"
      DEFAULT_MYSQL_USER: "icinga"
      DEFAULT_MYSQL_PASS: "icinga"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    depends_on:
      - nginx-gen
      - nginx-letsencrypt
      - mariadb
    networks:
      - mariadb_icinga
      - nginx_icinga

  prosody:
    build:
      context: "."
      dockerfile: prosody.dockerfile
      args:
        DOMAINNAME:
    container_name: prosody
    ports:
      - 5222:5222
      - 5269:5269
    volumes:
      - nginx_certs:/etc/prosody/certs:ro
    environment:
      VIRTUAL_HOST: "${DOMAINNAME}"
      VIRTUAL_PORT: "5280"
      LETSENCRYPT_HOST: "${DOMAINNAME}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    depends_on:
      - mariadb
      - nginx-gen
      - nginx-letsencrypt
    networks:
      nginx_prosody:
      mariadb_prosody:
      prosody_matterbridge:
        aliases:
          - "schnuppmann.de"
          - "conference.schnuppmann.de"

  matterbridge:
    build:
      context: "."
      dockerfile: matterbridge.dockerfile
      args:
        DOMAINNAME:
        CHANNEL:
        XMPP_USER:
        XMPP_PASS:
        TELEGRAM_TOKEN: 
        TELEGRAM_CHANNEL: 
    container_name: matterbridge
    networks:
      - prosody_matterbridge

  mongodb:
    image: "mongo:3.6"
    container_name: mongodb
    restart: always
    volumes:
      - mongodb:/data/db
    networks:
      - mongodb

  mariadb:      
    container_name: mariadb
    build: 
      context: "."
      dockerfile: mariadb.dockerfile
    restart: always
    volumes:
      - mariadb:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    networks:
      - mariadb_nextcloud
      - mariadb_icinga
      - nginx_nextcloud
      - mariadb_prosody

  ultisite:
    restart: always
    image: "ultisite"
    container_name: ultisite
    build:
      context: "https://github.com/larswolter/ultisite.git"
    environment:
      MONGO_URL: mongodb://mongodb:27017/meteor
      ROOT_URL: "https://${ULTISITE_DOMAIN}"
      PORT: "8080"
      VIRTUAL_HOST: "${ULTISITE_DOMAIN}"
      VIRTUAL_PORT: "8080"
      LETSENCRYPT_HOST: "${ULTISITE_DOMAIN}"
    depends_on:
      - nginx-gen
      - nginx-letsencrypt
      - mongodb
    networks:
      - mongodb
      - nginx_ultisite

  toolws:
    restart: always
    image: "toolws"
    container_name: toolws
    build:
      context: "https://github.com/larswolter/toolws.git"
    environment:
      MONGO_URL: mongodb://mongodb:27017/toolws
      ROOT_URL: "https://${TOOLWS_DOMAIN}"
      PORT: "8080"
      VIRTUAL_HOST: "${TOOLWS_DOMAIN}"
      VIRTUAL_PORT: "8080"
      LETSENCRYPT_HOST: "${TOOLWS_DOMAIN}"
    depends_on:
      - nginx-gen
      - nginx-letsencrypt
      - mongodb
    networks:
      - mongodb
      - nginx_toolws

  nextcloud:
    image: nextcloud:19-apache
    container_name: nextcloud
    restart: always
    volumes:
      - nextcloud:/var/www/html/config
    depends_on:
      - nginx-gen
      - nginx-letsencrypt
      - mariadb
    environment:
      - MYSQL_PASSWORD=nextcloud
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=mariadb
    networks:
      - mariadb_nextcloud
      - nginx_nextcloud
    
  coturn:
    build:
      context: .
      dockerfile: coturn.Dockerfile
    restart: always
    volumes:
      - nginx_certs:/etc/coturn/certs:ro
    ports:
## STUN/TURN
#      - "3478:3478"
#      - "3478:3478/udp"
#      - "3479:3479"
#      - "3479:3479/udp"
#      - "80:80"
#      - "80:80/udp"
## STUN/TURN SSL
      - "5349:5349"
      - "5349:5349/udp"
#      - "5350:5350"
#      - "5350:5350/udp"
#      - "443:443"
#      - "443:443/udp"
# Relay Ports
#      - "49152-65535:49152-65535"
#      - "49152-65535:49152-65535/udp"
    networks:
      - mongodb
    depends_on:
      - mongodb

  
  borgbackup:
    container_name: borgbackup
    build: 
      context: "."
      dockerfile: borg-backup.dockerfile
    restart: always
    volumes:
      - borgbackup:/borg
      - /root/.ssh:/root/.ssh:ro
      - mongodb:/backup/mongodb:ro
      - mariadb:/backup/mariadb:ro
      - portainer_data:/backup/portainer:ro
    environment:
      - BORG_BASE_DIR=/borg
      - BORG_REPO=user:password@host:folder
      - BORG_PASSPHRASE=geheim


networks:
  mongodb:
  mariadb_nextcloud:
  mariadb_prosody:
  mariadb_icinga:
  nginx_ultisite:
  nginx_toolws:
  nginx_nextcloud:
  nginx_prosody:
  nginx_portainer:
  nginx_proxy:
  nginx_icinga:
  prosody_matterbridge:

volumes:
  portainer_data:
    external: true
  nextcloud:
    external: true
  mongodb:
    external: true
  mariadb:
    external: true
  nginx_certs:
    external: true
  nginx_conf:
    external: true
  nginx_vhost:
    external: true
  nginx_html:
    external: true
  borgbackup:
    external: true

